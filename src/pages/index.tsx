import Head from "next/head";
import TranslateInput from "~/components/TranslateInput";
import { api } from "~/utils/api";
import { type KeyboardEvent, useState } from "react";
import { markWords } from "~/utils/algo";
import Footer from "~/components/Footer";

interface History {
  question: string;
  answer: string;
  solution: string;
}

export default function Home() {
  const { data, refetch } = api.past.getGerPast.useQuery();
  const [answer, setAnswer] = useState<string>("");
  const checkAnswer = api.checkAnswer.checkAnswer.useMutation();
  const [history, setHistory] = useState<History[] | null>(null);
  const [isHistoryActive, setIsHistoryActive] = useState<boolean>(false);

  function onSubmit() {
    const body = {
      question: data as string,
      answer,
    };

    setAnswer("");
    refetch();

    checkAnswer.mutate(body, {
      onSuccess: (res) => {
        const question = data as string;
        const content = res?.content;
        if (content && content.includes(": '")) {
          const solution = content.split(": ")[1]!.slice(1, -1);

          const newElement = {
            question,
            answer: markWords(answer, solution),
            solution,
          };

          if (history) {
            setHistory([...history, newElement]);
          } else {
            setHistory([newElement]);
          }
        }
      },
    });
  }

  function onEnter(event: KeyboardEvent<HTMLInputElement>) {
    if (event.key === "Enter" && answer && data) {
      onSubmit();
    }
  }

  function onClick() {
    if (answer && data) {
      onSubmit();
    }
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen w-screen bg-zinc-900">
        <div className="basis-1/4"></div>
        <div className="col flex basis-1/2  flex-col items-center ">
          <div className="flex w-full flex-1">
            {history && history.length > 0 && (
              <div className="flex w-full flex-col items-center justify-center">
                {checkAnswer.isLoading ? (
                  <div className="flex w-full cursor-pointer flex-col space-y-2 rounded-2xl border border-zinc-100 p-6 text-center text-xl text-zinc-600 transition-colors hover:border-white/10 hover:bg-white/5 dark:border-zinc-700/40 dark:text-zinc-400">
                    <span>Checking...</span>
                  </div>
                ) : (
                  <>
                    {isHistoryActive &&
                      history?.map((item, index) => (
                        <div
                          key={index}
                          className="flex w-full cursor-pointer flex-col space-y-2 rounded-2xl border border-zinc-100 p-6 text-center text-xl text-zinc-600 transition-colors hover:border-white/10 hover:bg-white/5 dark:border-zinc-700/40 dark:text-zinc-400"
                        >
                          <span>{item.question}</span>
                          <span>
                            <div
                              dangerouslySetInnerHTML={{
                                __html: item.answer,
                              }}
                            />
                          </span>
                          <span>{item.solution}</span>
                        </div>
                      ))}

                    {!isHistoryActive && (
                      <div className="flex w-full cursor-pointer flex-col space-y-2 rounded-2xl border border-zinc-100 p-6 text-center text-xl text-zinc-600 transition-colors hover:border-white/10 hover:bg-white/5 dark:border-zinc-700/40 dark:text-zinc-400">
                        <span>{history[history.length - 1]!.question}</span>
                        <span>
                          <div
                            dangerouslySetInnerHTML={{
                              __html: history[history.length - 1]!.answer,
                            }}
                          />
                        </span>
                        <span>{history[history.length - 1]!.solution}</span>
                      </div>
                    )}
                  </>
                )}
              </div>
            )}
          </div>
          <div className="202023 w-full max-w-3xl flex-col justify-center space-y-12 rounded-xl border border-zinc-100 bg-zinc-800/40 p-12 font-medium dark:border-zinc-700/40">
            {data && (
              <>
                <span className="flex flex-grow justify-center text-center text-2xl text-white">
                  {data}
                </span>
                <TranslateInput
                  onSubmit={onEnter}
                  onClick={onClick}
                  setAnswer={setAnswer}
                  answer={answer}
                />
              </>
            )}
          </div>

          <Footer />
        </div>
        <div className="basis-1/4"></div>
      </div>
    </>
  );
}
